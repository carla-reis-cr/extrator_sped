import json
import os
from src.pdf_parser import extract_text_from_pdf
from src.utils import clean_text, read_arquive
from src.data_handler import create_dataframe, export_to_csv
from src.nlp_processor import load_nlp_model, extract_rules, save_entities_to_txt


STATUS_FILE = "status.json"


# Caminhos dos arquivos
pdf_path = "data/input/efd_icms_ipi_3.1.7.pdf"
csv_output_path = "data/output/regras_sped.csv"

# Vari√°vel global para armazenar regras extra√≠das pelo NLP
rules_global = None

# Inicializa o status das etapas, se n√£o existir
def load_status():
    if os.path.exists(STATUS_FILE):
        with open(STATUS_FILE, "r") as file:
            return json.load(file)
    return {"carregamento": False, "extra√ß√£o": False, "nlp": False, "exporta√ß√£o": False}

# Salva o status atualizado
def save_status(status):
    with open(STATUS_FILE, "w") as file:
        json.dump(status, file, indent=4)

# Simula√ß√£o das fun√ß√µes para cada etapa
def carregar_modulo():
    print("‚úÖ M√≥dulo src carregado com sucesso!")
    
def extrair_texto():

    print("üîç Extraindo texto do PDF...")
    extract_text_from_pdf(pdf_path)

    print("‚úÖ Texto extra√≠do!")

def processar_nlp():
    global rules_global  # Permite que a vari√°vel seja usada em `exportar_csv()`
    
    print("ü§ñ Processando texto com NLP...")
    
    textNlp = read_arquive("data/output/text_extract.txt")
    nlp_model = load_nlp_model()
    nlp_model.max_length = 5000000  # Define o limite m√°ximo de processamento
    
    rules, entities = extract_rules(textNlp, nlp_model)
    save_entities_to_txt(entities, "data/output/entidades.txt")

    rules_global = rules  # Armazena as regras para exporta√ß√£o posterior
    
    print("‚úÖ Processamento conclu√≠do!")

def exportar_csv():
    global rules_global
    
    if rules_global is None:
        print("‚ö†Ô∏è Erro: O processamento NLP precisa ser conclu√≠do antes da exporta√ß√£o!")
        return
    
    print(f"üìÇ Exportando {len(rules_global)} regras para CSV...")

    try:
        df = create_dataframe(rules_global)
        export_to_csv(df, csv_output_path)
        print(f"‚úÖ Exporta√ß√£o conclu√≠da! Arquivo salvo em: {csv_output_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao exportar CSV: {e}")


def integration_database():
# 4. Integrar com banco de dados

    #print("Inserindo dados no banco de dados...")
    #engine = connect_to_db(db_connection_string)
    #insert_data(df, table_name, engine)

    print("‚úÖ Exporta√ß√£o conclu√≠da!")



# Menu interativo
def menu():
    global rules_global
    status = load_status()
    
    opcoes = {
        "1": ("Carregar m√≥dulo", carregar_modulo, "carregamento"),
        "2": ("Extrair texto do PDF", extrair_texto, "extra√ß√£o"),
        "3": ("Processar texto com NLP", processar_nlp, "nlp"),
        "4": ("Exportar regras para CSV", exportar_csv, "exporta√ß√£o"),
        "5": ("Sair", None, None)
    }

    while True:
        print("\nüìå **Selecione uma etapa para executar:**")
        for key, (desc, _, stage) in opcoes.items():
            if key != "5":
                status_txt = "‚úÖ Conclu√≠do" if status.get(stage, False) else "üî¥ Pendente"
                print(f"[{key}] {desc} - {status_txt}")
        print("[5] Sair")

        escolha = input("\nDigite a op√ß√£o desejada: ")
        
        if escolha == "5":
            print("üëã Saindo...")
            break
        elif escolha in opcoes:
            _, func, stage = opcoes[escolha]
            
            if status[stage]:  # Se a etapa j√° foi conclu√≠da, perguntar se quer refazer
                refazer = input("Esta etapa j√° foi conclu√≠da. Deseja refazer? (s/n): ").strip().lower()
                if refazer != "s":
                    print("‚è≠ Pulando etapa.")
                    continue
            
            func()
            status[stage] = True
            save_status(status)
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida!")
            
if __name__ == "__main__":
    menu()